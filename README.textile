h1. Hash vs Hazelcast vs Infinispan

h2. Overview

This is just a simple benchmark to compare "Hazelcast":http://www.hazelcast.com and "Infinispan":http://www.jboss.org/infinispan/ performance (with defaults), and includes a regular Hash object as a baseline.

h4. Hazelcast

A persistent (to disk) Key/Value store with strong availability guarantees. Turns out, it's not very fast relative to other popular Key/Value stores like Redis. At about 3.5ms for a key fetch over 10,000 keys, it's not exactly slow as that's moderately faster than you might expect for an RDBMS, but it's performance makes it the slowest K/V store I've tested so far.

If you value Durability, Consistency, and High Availability in an Embedded K/V store while still maintaining better-than-RDBMS performance, then Hazelcast might be what you're looking for. It's worth mentioning that Hazelcast should also scale horizontally very well.

Hazelcast only requires a single JAR, which makes it very easy to get started with.

h4. Infinispan

Intended to be a straight up cache, compatible with the MemCache API. It's data set is in memory, supports locality (Hazelcast's NearCache) and a more advanced eviction algorithm (LIRS; no idea how much this contributes to overall performance really).

Infinispan should also scale out horizontally very well as Maps can be "sharded", nodes can be rack aware (through configuration) and keys locally cached on access.

Infinispan requires nine JARs to run an embedded instance, which is kind of the opposite of "impressive". Maven makes that a non-issue if you're deploying as a unified JAR, but if you intend to run as a more traditional file-based Ruby project you have to decide wether you feel like copying dependencies at deploy, or committing all those JARs to your repository.

h2. Usage

You can just start it up:

bc. ./gradlew clean test -i

h2. Results

Running at 2 GHz Intel Core i7 these are my results:

| Measurement Point |  # |  Average  |    Min    |    Max    |    Total   |
| HashMap:read      | 10 |     5,130 |     1,554 |    25,129 |     51,297 |
| HashMap:write     | 10 |     6,979 |     2,232 |    24,745 |     69,791 |
| Hazelcast:read    | 10 |   285,971 |   250,889 |   497,032 |  2.859,714 |
| Hazelcast:write   | 10 | 1.694,217 | 1.519,539 | 2.737,081 | 16.942,170 |
| Infinispan:read   | 10 |    72,940 |    55,263 |   159,787 |    729,405 |
| Infinispan:write  | 10 |   186,443 |   117,869 |   644,130 |  1.864,429 |